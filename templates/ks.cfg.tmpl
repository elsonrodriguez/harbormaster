%pre
export osdiskid=$(find /dev/disk/by-path/ -name '$ROOT_DISK_PATH_PATTERN' -printf "%P" -quit)

if [ -z "$osdiskid" ]; then
  export osdisk="sda"
else
  osdiskpath=`readlink /dev/disk/by-path/$osdiskid`
  export osdisk=`basename $osdiskpath`
fi

echo "ignoredisk --only-use=$osdisk" > /tmp/partition_table
echo "zerombr" >> /tmp/partition_table
echo "clearpart --all --drives=$osdisk --initlabel" >> /tmp/partition_table
echo "part / --size 4096 --grow --fstype xfs --ondisk=$osdisk" >> /tmp/partition_table
%end

install
url --url=file:///run/install/repo
skipx
text
rootpw default

#ignoredisk --drives=/dev/disk/by-label/BOOT
%include /tmp/partition_table

network --bootproto=static --ip=${COBBLER_IP} --netmask=${NETWORK_NETMASK} --gateway=${NETWORK_GATEWAY} --nameserver=${COBBLER_IP} --hostname=harbormaster.${NETWORK_DOMAIN}

selinux --disabled
firewall --disabled

timezone America/Los_Angeles

#set number of masters until nodes are provisioned.
repo --name="Cobbler" --baseurl=file:///run/install/isodir/cobbler-repo --excludepkgs=systemd,systemd-libs,kpartx --install
repo --name="Centos" --baseurl=file:///run/install/repo  --install

%packages
@ Core
systemd
cobbler
cobbler-web
pykickstart
fence-agents
xinetd
setroubleshoot-server
perl-LockFile-Simple
perl-IO-Compress
perl-Compress-Raw-Zlib
perl-Digest-MD5
perl-Digest-SHA
perl-Net-INET6Glue
perl-LWP-Protocol-https
wget
dhcp
bind
syslinux 
ipxe-bootimgs
ed
patch
%end

services --enabled xinetd,cobblerd,httpd,rsyncd,named,dhcpd
services --disabled firewalld

%post --nochroot
# We don't actually need EPEL after we install really.
#mkdir -p /mnt/sys
#cp -a /run/install/repo
#cp /mnt/source/epel /mnt/sysimage/cobbler/....

cp -a /run/install/isodir/cobbler/etc/* /mnt/sysimage/etc/cobbler/
cp -a /run/install/isodir/cobbler/var/* /mnt/sysimage/var/lib/cobbler/
cp -a /run/install/isodir/cobbler/tftp /mnt/sysimage/etc/xinetd.d/tftp
cp -a /run/install/isodir/cobbler/bin/* /mnt/sysimage/usr/bin/
cp -a /run/install/isodir/cobbler/pythontriggers/* /mnt/sysimage/usr/lib/python2.7/site-packages/cobbler/modules/
cp -a /run/install/isodir/ubuntu /mnt/sysimage/var/lib/

%end

%post
httpd
cobblerd

#sometimes cobblerd isn't up in time, terrible hack, but meh.
sleep 10

#mount -o loop /mnt/install/isodir/ubuntu/ubuntu-16.04-server-amd64.iso /mnt/ubuntu
cobbler import --name=ubuntu-server-16.04 --path=/var/lib/ubuntu/repos/install --breed=ubuntu

cobbler repo add --name=main --apt-components=main --breed=apt --apt-dists=xenial  --keep-updated=n --arch=x86_64 --mirror=/var/lib/ubuntu/repos/main/
cobbler repo add --name=universe --apt-components=universe --breed=apt --apt-dists=xenial  --keep-updated=n --arch=x86_64 --mirror=/var/lib/ubuntu/repos/universe/
cobbler repo add --name=docker --apt-components=main --breed=apt --apt-dists=ubuntu-xenial  --keep-updated=n --arch=x86_64 --mirror=/var/lib/ubuntu/repos/docker/
cobbler repo add --name=kubernetes --apt-components=kubernetes --breed=apt --apt-dists=xenial  --keep-updated=n --arch=x86_64 --mirror=/var/lib/ubuntu/repos/kubernetes/

cobbler profile edit --name=ubuntu-server-16.04-x86_64 --repos="kubernetes docker main universe"

cobbler profile add --parent=ubuntu-server-16.04-x86_64 --name=kubernetes-master
cobbler profile add --parent=ubuntu-server-16.04-x86_64 --name=kubernetes-node

cobbler profile edit --name=kubernetes-master --kickstart=/var/lib/cobbler/kickstarts/kubernetes-master.seed
cobbler profile edit --name=kubernetes-node --kickstart=/var/lib/cobbler/kickstarts/kubernetes-node.seed

#TODO Need to find a cleaner way to do this. The issue is that I couldn't figure out how to get debian-installer to install these packages during main setup.
cobbler profile edit --name=kubernetes-master --ksmeta="extra_services='kube-init systemd-networkd etcd kube-apiserver kube-scheduler kube-controller-manager' extra_packages='etcd kubernetes-master koan'"
cobbler profile edit --name=kubernetes-node --ksmeta="extra_services='docker kubelet kube-proxy systemd-networkd' extra_packages='docker-engine socat kubernetes-node ceph-fs-common koan'"

#TODO Replace this with proper config management, the ksmeta pieces may be reusable, but the template-files should go.
#TODO Refactor, there's a master-profile pattern emerging.

cobbler profile edit --name=kubernetes-master --in-place --ksmeta="k8s_skydns_clusterip=$K8S_SKYDNS_CLUSTERIP"
cobbler profile edit --name=kubernetes-master --in-place --ksmeta="network_bootp_start=$NETWORK_BOOTP_START"
cobbler profile edit --name=kubernetes-master --in-place --ksmeta="network_bootp_end=$NETWORK_BOOTP_END"
cobbler profile edit --name=kubernetes-master --in-place --ksmeta="root_disk_path_pattern=$ROOT_DISK_PATH_PATTERN"

cobbler profile edit --name=kubernetes-node --in-place --ksmeta="k8s_skydns_clusterip=$K8S_SKYDNS_CLUSTERIP"
cobbler profile edit --name=kubernetes-node --in-place --ksmeta="network_bootp_start=$NETWORK_BOOTP_START"
cobbler profile edit --name=kubernetes-node --in-place --ksmeta="network_bootp_end=$NETWORK_BOOTP_END"
cobbler profile edit --name=kubernetes-node --in-place --ksmeta="root_disk_path_pattern=$ROOT_DISK_PATH_PATTERN"

cobbler profile edit --name=kubernetes-master --template-files="/var/lib/cobbler/templates/skydns-rc.yaml=/etc/kubernetes/manifests/skydns-rc.yaml"
cobbler profile edit --name=kubernetes-master --template-files="/var/lib/cobbler/templates/skydns-svc.yaml=/etc/kubernetes/manifests/skydns-svc.yaml" --in-place
cobbler profile edit --name=kubernetes-master --template-files="/var/lib/cobbler/templates/kube-init.service=/lib/systemd/system/kube-init.service" --in-place
cobbler profile edit --name=kubernetes-master --template-files="/var/lib/cobbler/templates/kube-routes.network=/lib/systemd/network/kube-routes.network" --in-place
cobbler profile edit --name=kubernetes-node --template-files="/var/lib/cobbler/templates/kube-routes.network=/lib/systemd/network/kube-routes.network"

cobbler profile edit --name=kubernetes-node --template-files="/var/lib/cobbler/templates/docker-network.conf=/etc/systemd/system/docker.service.d/docker-network.conf" --in-place

cobbler profile edit --name=kubernetes-node --template-files="/var/lib/cobbler/templates/kubelet.conf=/etc/kubernetes/node/kubelet.conf" --in-place

if  [[ "${ENABLE_PROXY}" == "true" ]]; then
  cobbler profile edit --name=kubernetes-node --template-files="/var/lib/cobbler/templates/docker-proxy.conf=/etc/systemd/system/docker.service.d/docker-proxy.conf" --in-place
  cobbler profile edit --name=kubernetes-node --template-files="/var/lib/cobbler/templates/proxy-settings.sh=/etc/profile.d/proxy-settings.sh" --in-place
  cobbler profile edit --name=kubernetes-master --template-files="/var/lib/cobbler/templates/proxy-settings.sh=/etc/profile.d/proxy-settings.sh" --in-place

  cp /var/lib/cobbler/templates/proxy-settings.sh /etc/profile.d/
  chmod +x /etc/profile.d/proxy-settings.sh
fi

cobbler system add --name=default --profile=kubernetes-master

#TODO see if we can just write these to the destination directory.
cp -a /var/lib/ubuntu/repos/main /var/www/cobbler/repo_mirror/
cp -a /var/lib/ubuntu/repos/universe /var/www/cobbler/repo_mirror/
cp -a /var/lib/ubuntu/repos/docker /var/www/cobbler/repo_mirror/
cp -a /var/lib/ubuntu/repos/kubernetes /var/www/cobbler/repo_mirror/

cobbler sync
%end

reboot
